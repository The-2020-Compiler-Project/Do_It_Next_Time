    int program()// 程序
    {
        out_statement();
    }
    int out_statement()//外部声明
    {
        func_def();
    }
    int func_def()//函数定义
    {

        if (!p->a.compare("i"))//是否为标识符
        {

        }
        else exit(0);
        if (p[p->num] != '(')
            exit(0);
        //函数声明();
        p = p->next;
        if (p[p->num] != ')')
            exit(0);
        p = p->next;
        if (p[p->num] != '{')
            exit(0);
        p = p->next;
        complex_sentence();
        if (p[p->num] != '}')
            exit(0);
    }
    int type_explanation()//类型说明
    {
        int n;
        a->prior = a;
        a = a->next;
        a->next = NULL;
        a = new SYNBL;
        s.push_back(a);
        if (p->a == "k")
        {
            if (!strcmp("void", k[p->num]))
                n=1;           
            else if (!strcmp("int", k[p->num]))
                n=2;           
            else if (!strcmp("char", k[p->num]))
                n=3;           
            else if (!strcmp("float", k[p->num]))
                n=4;
            switch(n)
            case 1:
            case 2:
            case 3:
            case 4:
            defaul: return 0;
            p=p->next;
            return 1;
        }
        else 
            exit(0);
    }
    int complex_sentence()//复合语句
    {
        if (!sentence_list());
        {
            if (!statement_list())
                exit(0);
            if (!sentence_list())
                return 0;
        }
        return 1;
    }
    int sentence_list()//语句列表
    {
        sentence();
    }
    int statement_list()//声明列表
    {
        if (!type_explanation())
            return 0;
        statement();
        if (p().compare(";")!=0)
            exit(0);
        statement_list1();//是否要return
    }
    int statement_list1()//声明列表1
    {
        if (!statement_list())
            return 0;
    }
    int statement()//声明
    {
        if (!direct_description())
            return 0;
        return 1;
    }
    int direct_description()//直接说明符
    {   
        if (p->a.compare("i") != 0) //不是标识符
            exit(0);

        if (!direct_description1());
            return 0;
        return 1;
    }
    int direct_description1()//直接说明符1
    {
        if (!p().compare("["))
        {
            //s.back()->typ = a->prior->typ;
            //s.back()->name=p();填写符号表变量名，需要vector，但是似乎不用在这里填写
            //填写数组表
            if (!常数表达式)//没有定义大小
                exit(0);
            if (!p().compare("]"))
                exit(0);
            if (!direct_description1())
                return 0;
            else
                return 1;
        }
        if (!p().compare(","))//下一个字符为,
        {
            //开辟总表下一个空间和vector下一空间
            
            //准备填表
            if (p->a.compare("i") != 0) //不是标识符
                exit(0);
            //如果是标识符        
            if (!direct_description1())
                return 0;
            else
                return 1;
        }
        return 0;        
    }
    int sentence()//语句
    {
        if (complex_sentence() || express() )
            return 1
        else
            return 0;
    }
    int express()//表达式
    {
        assignment()
    }
    int assignment()//赋值表达式
    {
        if (PLUS())
            return 1;
        if (!BASE())
            return 0;
        if (!数值操作符())
            return 0;
        if (!assignment())
            return 0;
        return 1;
    }
    int PLUS()
    {
        if (!TIMES())
            return 0;
        if (!PLUS1())
            return 0;
        return 1;
    }
    int PLUS1()
    {
        if ('+')
        {
            if (!TIMES())
                exit(0);
            if (!PLUS1())
                exit(0);
            return 1;
        }
        else if ('-')
        {
            if (!TIMES())
                exit(0);
            if (!PLUS1())
                exit(0);
            return 1;
        }
        else return 1;
    }
    int TIMES()
    {
        if (!BASE())
            return 0;
        if (!TIMES1())
            return 0;
        return 1;
    }
    int TIMES1()
    {
        if ('*')
        {
            if (!BASE())
                exit(0);
            if (!TIMES1())
                exit(0);
            return 1;
        }
        else if ('/')
        {
            if (!BASE())
                exit(0);
            if (!TIMES1())
                exit(0);
            return 1;
        }
        else if ('%')
        {
            if (!BASE())
                exit(0);
            if (!TIMES1())
                exit(0);
            return 1;
        }
        else return 1;
    }
    int BASE()
    {
        if (标识符())
            return 1;
        if (常量())
            return 1;
        if (字符串())
            return 1;
        if ('(')
        {
            if (!表达式())
                exit(0);
            if (!')')
                exit(0);
        }
        return 0;
    }